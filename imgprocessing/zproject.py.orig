#!/usr/bin/python


import numpy as np
import cv2
import scipy.ndimage
from PyQt4 import QtCore


class Zproject(QtCore.QThread):

    def __init__(self, imglist, zprojection_output):
        super(Zproject, self).__init__()
        self.skip = 10
        self.imglist = imglist
        self.zprojection_output = zprojection_output
        self.skip_num = 10

    def run(self):
        self.run_onthisthread()

    def run_onthisthread(self):
        """
        Run the Zprojection
        This is not in run, so we can bypass run() if we don't want to start a new thread
        """
<<<<<<< HEAD
        print 'zproject thread id', QtCore.QThread.currentThreadId()

        if len(self.imglist) < 1:
            return "no images in list"
=======
>>>>>>> d8791cd8a1e591bb68a101dc9ffbf4ecd0b08060

        if os.path.isfile(self.zprojection_output) is False:

            if len(self.imglist) < 1:
                return "no images in list"

            try:
                im = scipy.ndimage.imread(self.imglist[0])
            except IOError as e:
                return "Cant load {}. Is it corrupted?".format(self.imglist[0])

<<<<<<< HEAD
        max_array = self.max_projection(sparse_filelist, imdims)
        cv2.imwrite(self.zprojection_output, max_array)
=======
            imdims = im.shape

            # make a new list by removing every nth image
            sparse_filelist = sorted(self.imglist)[0::self.skip_num]

            print "performing z-projection on sparse file list"

            max_array = self.max_projection(sparse_filelist, imdims)
            cv2.imwrite(self.zprojection_output, max_array)
>>>>>>> d8791cd8a1e591bb68a101dc9ffbf4ecd0b08060

        self.emit(QtCore.SIGNAL('update(QString)'), "Z-projection finished")


    def max_projection(self, filelist, imdims):

        maxi = np.zeros(imdims)

        for count, file_ in enumerate(filelist):

            im_array = scipy.ndimage.imread(file_)

            #im_array = cv2.imread(file_, cv2.CV_LOAD_IMAGE_UNCHANGED)
            #max_ = np.maximum(max_, im_array[:][:])
            inds = im_array > maxi
            maxi[inds] = im_array[inds]
            if count % 10 == 0:
                self.emit(QtCore.SIGNAL('update(QString)'), "Z-project: " + str(count * 10) + "/" + str(len(self.imglist))
                                                            + " images processed")
                #self.callback("Z project: {0} images".format(count * self.skip))
        return maxi

# class ZprojectThreaded(Zproject, QtCore.QThread):
#
#     def __init__(self, imglist, zprojection_output):
#         super(ZprojectThreaded, self).__init__(imglist, zprojection_output)


