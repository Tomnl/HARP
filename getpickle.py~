"""
Copyright 2015 Medical Research Council Harwell.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

"""


import os
import shutil
try:
    import cPickle as pickle
except ImportError:
    import pickle
from config import Config


def get_pickle(mainwindow):
    """ Creates the python pickle config file for future processing. Also creates a more readable text file of the
    same information.
    """

    # Get input and output folders (As the text is always from the text box it will hopefully keep track of
    #any changes the user might have made
    inputFolder = str(self.ui.lineEditInput.text())
    outputFolder = str(self.ui.lineEditOutput.text())
    path_out, folder_name = os.path.split(outputFolder)

    #### Write to config file ####
    config = Config()

    # Create a folder for the metadata
    self.meta_path = os.path.join(outputFolder, "Metadata")
    if not os.path.exists(self.meta_path):
        os.makedirs(self.meta_path)

    self.config_path = os.path.join(self.meta_path, "configobject.txt")
    self.log_path = os.path.join(self.meta_path, "config4user.log")

    # Create config file and log file
    log = open(self.log_path, 'w+')

    #========================================================================================
    # Create config object
    #========================================================================================
    # Get cropping options
    if not self.ui.checkBoxCropYes.isChecked():
        config.cropbox_path = "Not_applicable"
        config.crop_manual = "Not_applicable"
        config.crop_option = "No_crop"
    elif self.ui.radioButtonMan.isChecked() :
        config.xcrop = str(self.ui.lineEditX.text())
        config.ycrop = str(self.ui.lineEditY.text())
        config.wcrop = str(self.ui.lineEditW.text())
        config.hcrop = str(self.ui.lineEditH.text())
        config.crop_option = "Manual"
        config.crop_manual = config.xcrop+" "+config.ycrop+" "+config.wcrop+" "+config.hcrop
        config.cropbox_path = "Not_applicable"
    elif self.ui.radioButtonAuto.isChecked() :
        config.cropbox_path = "Not_applicable"
        config.crop_manual = "Not_applicable"
        config.crop_option = "Automatic"
    elif self.ui.radioButtonUseOldCrop.isChecked() :
        config.crop_manual = "Not_applicable"
        config.crop_option = "Old_crop"
        config.cropbox_path = "Not_applicable"
    elif self.ui.radioButtonDerived.isChecked() and self.ui.radioButtonOPT.isChecked:
        config.crop_manual = "Not_applicable"
        config.crop_option = "Derived"
        if self.derived_output_name:
            d_path = os.path.join(path_out, str(self.derived_output_name),"Metadata","cropbox.txt")
        else:
            d_path =os.path.join(path_out, str(self.ui.lineEditDerivedChnName.text()),"Metadata","cropbox.txt")
        self.crop_pickle_path = d_path
        config.cropbox_path = self.crop_pickle_path

    ##### Get Scaling factors ####
    if self.ui.checkBoxSF2.isChecked():
        config.SF2 = "yes"
    else :
        config.SF2 = "no"

    if self.ui.checkBoxSF3.isChecked():
        config.SF3 = "yes"
    else :
        config.SF3 = "no"

    if self.ui.checkBoxSF4.isChecked():
        config.SF4 = "yes"
    else :
        config.SF4 = "no"

    if self.ui.checkBoxSF5.isChecked():
        config.SF5 = "yes"
    else :
        config.SF5 = "no"

    if self.ui.checkBoxSF6.isChecked():
        config.SF6 = "yes"
    else :
        config.SF6 = "no"

    if self.ui.checkBoxPixel.isChecked():
        config.pixel_option = "yes"
        config.user_specified_pixel = str(self.ui.lineEditPixel.text())
        config.SF_pixel = float(self.pixel_size) / float(self.ui.lineEditPixel.text())
        config.SF_pixel = round(config.SF_pixel,4)
        config.SFX_pixel = float(self.ui.lineEditPixel.text())/float(self.pixel_size)
        config.SFX_pixel = round(config.SFX_pixel,4)
    else :
        config.user_specified_pixel = "Not applicable"
        config.pixel_option = "no"
        config.SF_pixel = "Not applicable"
        config.SFX_pixel = "Not applicable"

    if self.ui.checkBoxScansReconComp.isChecked():
        config.scans_recon_comp = "yes"
    else :
        config.scans_recon_comp = "No"

    if self.ui.checkBoxCropComp.isChecked():
        config.crop_comp = "yes"
    else :
        config.crop_comp  = "No"

    # ID for session
    config.unique_ID = str(self.unique_ID)
    config.config_path = self.config_path
    config.tmp_dir = self.tmp_dir
    config.full_name = self.full_name
    config.input_folder = inputFolder
    config.output_folder = outputFolder
    config.scan_folder = self.scan_folder
    config.meta_path = self.meta_path
    config.recon_log_file = self.recon_log_path
    config.recon_folder_size = self.f_size_out_gb
    config.recon_pixel_size = self.pixel_size

    # If using windows it is important to put \ at the end of folder name
    # Combining scaling and SF into input for imageJ macro
    config.cropped_path = os.path.join(config.output_folder,"cropped")
    config.scale_path = os.path.join(config.output_folder,"scaled_stacks")
    if config.crop_option == "No_crop":
        config.imageJ = config.input_folder+os.sep+'^'+config.scale_path+os.sep+'^'+config.full_name
    else :
        config.imageJ = config.cropped_path+os.sep+'^'+config.scale_path+os.sep+'^'+config.full_name

    #========================================================================================
    # Write the config more readable version
    #========================================================================================
    log.write("Session_ID    "+config.unique_ID+"\n")
    log.write("full_name    "+config.full_name+"\n")
    log.write("Input_folder    "+config.input_folder+"\n")
    log.write("Output_folder    "+config.output_folder+"\n")
    log.write("Scan_folder    "+config.scan_folder+"\n")
    log.write("Crop_option    "+config.crop_option+"\n")
    log.write("Crop_manual    "+config.crop_manual+"\n")
    log.write("Crop_folder    "+config.cropped_path+"\n")
    log.write("Cropbox_location "+config.cropbox_path+"\n")
    log.write("Downsize_by_factor_2?    "+config.SF2+"\n")
    log.write("Downsize_by_factor_3?    "+config.SF3+"\n")
    log.write("Downsize_by_factor_4?    "+config.SF4+"\n")
    log.write("Downsize_by_factor_5?    "+config.SF5+"\n")
    log.write("Downsize_by_factor_6?    "+config.SF6+"\n")
    log.write("Downsize_by_pixel?    "+config.pixel_option+"\n")
    log.write("User_specified_pixel_size?    "+config.user_specified_pixel+"\n")
    log.write("Downsize_value_for_pixel    "+str(config.SF_pixel)+"\n")
    log.write("Compression_of_scans_and_original_recon?    "+config.scans_recon_comp+"\n")
    log.write("Compression_of_cropped_recon?    "+config.crop_comp+"\n")
    log.write("ImageJconfig    "+config.imageJ+"\n")
    log.write("Recon_log_file    "+config.recon_log_file+"\n")
    log.write("Recon_folder_size   "+config.recon_folder_size+"\n")
    log.write("Recon_pixel_size  "+config.recon_pixel_size+"\n")
    self.configOb = config
    # Pickle the class to a file
    with open(self.config_path, 'w+') as fh:
        pickle.dump(config, fh)

    # Copy temp files
    if config.crop_option == "Manual" :
        if os.path.exists(os.path.join(config.tmp_dir,"max_intensity_z.tif")):
            shutil.copyfile(os.path.join(config.tmp_dir,"max_intensity_z.tif"), os.path.join(config.meta_path,"max_intensity_z.tif"))

    log.close()

