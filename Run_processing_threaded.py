import sys, time
from PyQt4 import QtCore, QtGui
from Progress import Ui_Progress
import subprocess
import argparse
import os
import cPickle as pickle
# Have to load the custom ConfigClass see http://stefaanlippens.net/pickleproblem for reasons
#from Main import ConfigClass

class Progress(QtGui.QDialog):
    '''
    Class to provide the dialog box to monitor current Image processing jobs.
    Basically extend the QDialog class (from Progress.py) generated by QT Designer
    '''

    # Create a constructor
    def __init__(self,configOb):
        print "Progress has started"
        self.threadPool = []
        super(Progress, self).__init__()
        self.ui=Ui_Progress()
        self.ui.setupUi(self)
        self.show()

        self.ID_folder = os.path.join("/tmp","siah",str(configOb.unique_ID))
        print "Check folders"+str(os.listdir(self.ID_folder))
        self.ui.label_1.setText(configOb.full_name)

        # Get the session log file
        session_log = os.path.join("/tmp","siah",configOb.unique_ID,configOb.full_name+"_session.log")
        session = open(session_log, 'w+')
        text = session.read()
        print configOb.config_path
        self.test(configOb)

    def add(self,test):
        # Updates the GUI to tell the user what the stage the processing is at
        self.ui.label1_tracking.setText(test)
        if test == "Crop finished" :
            self.ui.progressBar_1.setValue(50)
        if test == "Scaling finished" :
            self.ui.progressBar_1.setValue(100)

    def test(self,configOb):
        self.threadPool = []
        self.threadPool.append( WorkThread(configOb,self.ui) )
        self.connect( self.threadPool[len(self.threadPool)-1], QtCore.SIGNAL("update(QString)"), self.add )
        self.threadPool[len(self.threadPool)-1].start()



class WorkThread(QtCore.QThread):
    def __init__(self,configOb,ui):
        QtCore.QThread.__init__(self)
        self.configOb = configOb
        self.ui = ui
    def __del__(self):
        self.wait()

    def run(self):
        self.emit( QtCore.SIGNAL('update(QString)'), "Started Processing" )
        print self.configOb.full_name
        cropped_path = os.path.join(self.configOb.output_folder,"cropped")

        # Get the directory of the script
        dir = os.path.dirname(os.path.abspath(__file__))

        # Store tracking information in the session tmp folder
        print "Creating log file"
        # Create path for session log file
        session_log = os.path.join("/tmp","siah",self.configOb.unique_ID,self.configOb.full_name+"_session.log")
        self.emit( QtCore.SIGNAL('update(QString)'), "Creating log file" )
        # Create session log file
        session = open(session_log, 'w+')

        if not os.path.exists(cropped_path):
            os.makedirs(cropped_path)

        if self.configOb.crop_option == "Manual" :
            print "performing manual crop"
            session.write("manual crop started\n")
            self.emit( QtCore.SIGNAL('update(QString)'), "manual crop started" )
            manpro = subprocess.call(["python", dir+"/autocrop.py","-i",self.configOb.input_folder,"-o",
                         cropped_path, "-t", "tif","-d",self.configOb.xcrop, self.configOb.ycrop, self.configOb.wcrop, self.configOb.hcrop],
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.emit( QtCore.SIGNAL('update(QString)'), "Crop finished" )
            print "Manual Crop finished"
            session.write("Crop finished\n")

        if self.configOb.crop_option == "Automatic" :
            print "Autocrop started"
            session.write("Autocrop started\n")
            self.emit( QtCore.SIGNAL('update(QString)'), "Autocrop started" )
            aupro = subprocess.call(["python", dir+"/autocrop.py","-i",self.configOb.input_folder,"-o", cropped_path, "-t", "tif"],
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.emit( QtCore.SIGNAL('update(QString)'), "Crop finished" )
            session.write("Crop finished\n")

        if self.configOb.crop_option == "None" :
            self.emit( QtCore.SIGNAL('update(QString)'), "No Crop carried out" )
            print "No crop carried out"
            session.write("No crop carried out\n")



        if self.configOb.SF2 == "yes" :
            session.write("Scaling SF2 started\n")
            self.emit( QtCore.SIGNAL('update(QString)'), "SF2 Scaling started" )
            proSF2 = subprocess.Popen(["imagej", "-b", dir+"/siah_scale.txt", self.configOb.imageJ+":0.5"],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            print "SF2 standard out and error\n"
            outputSF2 = proSF2.stdout.read()
            outerrSF2 = proSF2.stderr.read()

        # NEED TO PUT INTO FUNCTION
        if self.configOb.SF3 == "yes" :
            session.write("Scaling SF3 started\n")
            self.emit( QtCore.SIGNAL('update(QString)'), "SF3 Scaling started" )
            proSF3 = subprocess.Popen(["imagej", "-b", dir+"/siah_scale.txt", self.configOb.imageJ+":0.3333"],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            print "SF3 standard out and error\n"
            outputSF3 = proSF3.stdout.read()
            outerrSF3 = proSF3.stderr.read()

        if self.configOb.SF4 == "yes" :
            session.write("Scaling SF4 started\n");
            self.emit( QtCore.SIGNAL('update(QString)'), "SF4 Scaling started" )
            proSF4 = subprocess.Popen(["imagej", "-b", dir+"/siah_scale.txt", self.configOb.imageJ+":0.25"],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            print "SF2 standard out and error\n"
            outputSF4 = proSF4.stdout.read()
            outerrSF4 = proSF4.stderr.read()

        if self.configOb.SF2 == "yes" :
            session.write("#####SF2 standard out and error\n#####")
            session.write(outputSF2);
            session.write(outerrSF2);

        if self.configOb.SF3 == "yes" :
            session.write("#####SF3 standard out and error\n#####")
            session.write(outputSF3);
            session.write(outerrSF3);

        if self.configOb.SF4 == "yes" :
            session.write("#####SF4 standard out and error\n#####")
            session.write(outputSF4);
            session.write(outerrSF4);

        self.emit( QtCore.SIGNAL('update(QString)'), "finished processing" )
        print "processing finished"

def main():
    app = QtGui.QApplication(sys.argv)
    test = Progress()
    test.show()
    app.exec_()

if __name__ == "__main__":
       main()